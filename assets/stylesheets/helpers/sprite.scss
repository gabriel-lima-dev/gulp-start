/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$bower-name: 'bower';
$bower-x: 60px;
$bower-y: 0px;
$bower-offset-x: -60px;
$bower-offset-y: 0px;
$bower-width: 60px;
$bower-height: 60px;
$bower-total-width: 120px;
$bower-total-height: 135px;
$bower-image: '../img/sprite.png';
$bower: (60px, 0px, -60px, 0px, 60px, 60px, 120px, 135px, '../img/sprite.png', 'bower', );
$gulp-name: 'gulp';
$gulp-x: 0px;
$gulp-y: 0px;
$gulp-offset-x: 0px;
$gulp-offset-y: 0px;
$gulp-width: 60px;
$gulp-height: 135px;
$gulp-total-width: 120px;
$gulp-total-height: 135px;
$gulp-image: '../img/sprite.png';
$gulp: (0px, 0px, 0px, 0px, 60px, 135px, 120px, 135px, '../img/sprite.png', 'gulp', );
$sass-name: 'sass';
$sass-x: 60px;
$sass-y: 60px;
$sass-offset-x: -60px;
$sass-offset-y: -60px;
$sass-width: 60px;
$sass-height: 45px;
$sass-total-width: 120px;
$sass-total-height: 135px;
$sass-image: '../img/sprite.png';
$sass: (60px, 60px, -60px, -60px, 60px, 45px, 120px, 135px, '../img/sprite.png', 'sass', );
$spritesheet-width: 120px;
$spritesheet-height: 135px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($bower, $gulp, $sass, );
$spritesheet: (120px, 135px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
